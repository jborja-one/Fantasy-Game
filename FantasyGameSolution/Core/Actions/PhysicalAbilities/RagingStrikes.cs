using System;using Core.Interfaces;using Core.Models;namespace Core.Actions.PhysicalAbilities{    public class RagingStrikes : IAbility    {        public string Name { get; set; } = "Raging Strikes";        public string Description { get; set; } = "Increases damage dealt by 20% for 20s.";        public int Cooldown { get; set; } = 120;        public string Effect { get; set; } = "Increases damage dealt by 20% for 20s.";        public int RequiredLevel { get; set; } = 4;        public DateTime? LastUsed { get; set; }        public int EffectDuration { get; set; } = 20;        public bool CanPerform(Character character)        {            //Cooldown check            if (LastUsed.HasValue && (DateTime.Now - LastUsed.Value).TotalSeconds < Cooldown)            {                Console.WriteLine($"{Name} is on cooldown.");            }            ////Job check            //if (character.Job.Name != "Black Mage" || character.Job.Name != "WhiteMage")            //{            //    Console.WriteLine($"{character.Job.Name} cannot use {Name}. Only Magic users can use this Ability.");            //    return false;            //}            //level check            if (character.Level < RequiredLevel)            {                Console.WriteLine($"{character.Name} does not mee the required level to cast {Name}");                return false;            }            return true;        }        public bool Execute(Character character, IAbility ability)        {            if (!CanPerform(character))            {                return false;            }            //if (ability is ISpell spell)            //{            //    int originalCastTime = spell.CastTime;            //    spell.CastTime = 0;            //    //spell.Execute(character);            //    spell.CastTime = originalCastTime;            //    LastUsed = DateTime.Now;            //    return true;            //}            return false;        }    }}