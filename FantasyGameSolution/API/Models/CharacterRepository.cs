using Core.Models;using System.Data;using Dapper;namespace Core.Repositories{    public class CharacterRepository    {        private readonly IDbConnection _dbConnection;        public CharacterRepository(IDbConnection dbConnection)        {            _dbConnection = dbConnection;        }        public Character GetCharacterById(int characterId)        {                        return _dbConnection.QuerySingleOrDefault<Character>("SELECT * FROM Characters WHERE CharacterId = @characterId", new {characterID = characterId});        }        public IEnumerable<Character> GetAllCharacters()        {                        return _dbConnection.Query<Character>("SELECT * FROM Characters;");        }        public int CreateCharacter(Character newCharacter)        {            return _dbConnection.Execute("INSERT INTO Characters (Name, Health, Attack, Defense, Mana, Level, JobId) VALUES (@name, 100, 15, 15, 1, 1, @jobId);",                new { name = newCharacter.Name, health = 100, attack = 15, deffense = 15, mana = 100, level = 1, jobId = newCharacter.JobId });        }        public void UpdateCharacter(Character character)        {            _dbConnection.Execute("UPDATE Characters SET Name = @name, Health = @health, Attack = @attack, Deffense = @deffense, Mana = @mana, Level = @level, JobId = @jobId WHERE CharacterId = @characterID;",                new {name = character.Name, health = character.Health, attack = character.Attack, deffense = character.Defense, mana = character.Mana, level = character.Level, jobId = character.JobId});        }        public void DeleteCharacter(int characterId)        {            _dbConnection.Execute("DELETE FROM Characters WHERE CharacterId = @characterId;", new { characterID = characterId });            _dbConnection.Execute("DELETE FROM Player WHERE CharacterId = @characterId;", new { characterID = characterId });        }    }}