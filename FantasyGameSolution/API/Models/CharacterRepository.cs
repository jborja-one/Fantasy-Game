using Core.Models;using System.Data;using Dapper;namespace Core.Repositories{    public class CharacterRepository    {        private readonly IDbConnection _dbConnection;        public CharacterRepository(IDbConnection dbConnection)        {            _dbConnection = dbConnection;        }        public Character GetCharacterById(int characterId)        {            const string query = "SELECT * FROM Characters WHERE Id = @Id"; // Adjust table and column names as needed            return _dbConnection.QuerySingleOrDefault<Character>(query, new { Id = characterId });        }        public IEnumerable<Character> GetAllCharacters()        {            const string query = "SELECT * FROM Characters"; // Adjust table name            return _dbConnection.Query<Character>(query);        }        public void AddCharacter(Character character)        {            const string query = @"                INSERT INTO Characters (Name, JobId, Level, Health, AttackPower, Defense)                 VALUES (@Name, @JobId, @Level, @Health, @AttackPower, @Defense)";            _dbConnection.Execute(query, character);        }        public void UpdateCharacter(Character character)        {            const string query = @"                UPDATE Characters                SET Name = @Name, JobId = @JobId, Level = @Level, Health = @Health, AttackPower = @AttackPower, Defense = @Defense                WHERE Id = @Id";            _dbConnection.Execute(query, character);        }        public void DeleteCharacter(int characterId)        {            const string query = "DELETE FROM Characters WHERE Id = @Id";            _dbConnection.Execute(query, new { Id = characterId });        }    }}